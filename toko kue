#include <iostream>
#include <string>
#include <vector>
#include <iomanip>
#include <thread>
#include <chrono>
#include <cstdlib>
#include <unistd.h>

using namespace std;

struct Cake {
    string name;
    string description;
    double price;
};

struct User {
    string username;
    string password;
};

struct Order {
    string cakeName;
    string flavor;
    string size;
    double totalPrice;
};

void displayReceipt(const vector<Order>& orders);
void clearScreen() {
    #if defined(_WIN32) || defined(_WIN64)
        system("cls");
    #else
        system("clear");
    #endif
}

void displayMainMenu() {
    cout << "===== Hammer Bakery =====" << endl;
    cout << "1. Lihat Katalog" << endl;
    cout << "2. Pesan Kue" << endl;
    cout << "3. Keluar" << endl;
    cout << "Pilih opsi: ";
}

void displayCakeMenu(const vector<Cake>& catalog) {
    clearScreen();
    while (true) {
        cout << "===== Katalog Kue =====" << endl;
        cout << "No.  Nama Kue              Deskripsi                          Harga" << endl;
        cout << "---------------------------------------------------------------------" << endl;
        for (size_t i = 0; i < catalog.size(); ++i) {
            cout << setw(2) << right << i + 1 << ".  ";
            cout << setw(20) << left << catalog[i].name;
            cout << setw(35) << left << catalog[i].description;
            cout << " Rp" << fixed << setprecision(0) << catalog[i].price << endl;
        }
        cout << "  0. Kembali ke Menu Utama" << endl;
        
        int choice;
        cout << "Pilih opsi: ";
        cin >> choice;
        
        if (choice == 0) {
            clearScreen();
            break;
        } else {
            clearScreen();
            cout << "Opsi tidak valid. Silakan coba lagi." << endl;
        }
    }
}

void registerUser(vector<User>& users) {
    string username, password;
    cout << "===== SELAMAT DATANG DI TOKO NANDO =====" << endl;
    cout << "=====      Daftarkan Akun anda     =====" << endl;
    cout << "Masukkan nama pengguna: ";
    cin >> username;
    cout << "Masukkan kata sandi: ";
    cin >> password;
    
    users.push_back({username, password});
}

bool loginUser(const vector<User>& users, string& loggedInUser) {
    string username, password;
    
    cout << "===== Silahkan login =====" << endl;
    cout << "Masukkan nama pengguna: ";
    cin >> username;
    cout << "Masukkan kata sandi: ";
    cin >> password;
    for (const auto& user : users) {
        if (user.username == username && user.password == password) {
            loggedInUser = username;
            return true;
        }
    }
    return false;
}

void animasiloading(int durationSeconds) {
    const char* loadingChars = "|/-\\";
    int numChars = 4;
    int sleepDuration = 100;  

    for (int i = 0; i < durationSeconds * 1000 / sleepDuration; ++i) {
        cout << "\rMembuat Akun... " << loadingChars[i % numChars] << std::flush;
        this_thread::sleep_for(chrono::milliseconds(sleepDuration));
    }

}

void orderCake(const vector<Cake>& catalog, vector<Order>& orders, const string& loggedInUser) {
    clearScreen();
    int choice;
    cout << "Pilih nomor kue yang ingin dipesan: ";
    cin >> choice;
    while (cin.fail() || choice < 1 || choice > catalog.size()) {
        cin.clear();
        cin.ignore(10000, '\n');
        cout << "Masukkan nomor kue yang valid: ";
        cin >> choice;
    }

    string flavor;
    vector<string> flavors = {"Cokelat", "Vanila", "Stroberi"};
    cout << "Pilih rasa: " << endl;
    for (size_t i = 0; i < flavors.size(); ++i) {
        cout << i + 1 << ". " << flavors[i] << endl;
    }
    int flavorChoice;
    cout << "Pilihan Anda: ";
    cin >> flavorChoice;
    while (cin.fail() || flavorChoice < 1 || flavorChoice > flavors.size()) {
        cin.clear();
        cin.ignore(10000, '\n');
        cout << "Pilihan rasa tidak valid. Silakan pilih kembali: ";
        cin >> flavorChoice;
    }
    flavor = flavors[flavorChoice - 1];

    string size;
    double basePrice = catalog[choice - 1].price;
    double totalPrice = basePrice;
    vector<string> sizes = {"Regular", "Large", "Extra Large"};
    cout << "Pilih ukuran: " << endl;
    for (size_t i = 0; i < sizes.size(); ++i) {
        cout << i + 1 << ". " << sizes[i] << endl;
    }
    int sizeChoice;
    cout << "Pilihan Anda: ";
    cin >> sizeChoice;
    while (cin.fail() || sizeChoice < 1 || sizeChoice > sizes.size()) {
        cin.clear();
        cin.ignore(10000, '\n');
        cout << "Pilihan ukuran tidak valid. Silakan pilih kembali: ";
        cin >> sizeChoice;
    }
    size = sizes[sizeChoice - 1];

    if (size == "Large") {
        totalPrice += 5000;
    } else if (size == "Extra Large") {
        totalPrice += 10000;
    }

    orders.push_back({catalog[choice - 1].name, flavor, size, totalPrice});
    cout << "Pesanan berhasil diterima!" << endl;
    cout << "Total Harga: Rp" << fixed << setprecision(0) << totalPrice << endl;

    displayReceipt(orders);
}

void displayReceipt(const vector<Order>& orders) {
    cout << "===== Struk Pembelian =====" << endl;
    for (size_t i = 0; i < orders.size(); ++i) {
        cout << "Pesanan " << i + 1 << ":" << endl;
        cout << "Nama Kue: " << orders[i].cakeName << endl;
        cout << "Rasa: " << orders[i].flavor << endl;
        cout << "Ukuran: " << orders[i].size << endl;
        cout << "Total Harga: Rp" << fixed << setprecision(0) << orders[i].totalPrice << endl;
        cout << "--------------------------" << endl;
    }

    char repeat;
    cout << "Apakah Anda ingin memesan lagi? (y/n): ";
    cin >> repeat;
    if (repeat == 'n' || repeat == 'N') {
        cout << "Terima kasih telah menggunakan layanan Hammer Bakery." << endl;
        exit(0);
    }
}

int main() {
    vector<Cake> cakeCatalog = {
        {"Red Velvet", "Lembut dan manis", 50000},
        {"Choco Lava", "Coklat leleh di dalam", 75000},
        {"Kue sus", "enak banget", 5000},
        {"Risol mayo", "Risol enak dengan mayo", 3500}
    };

    vector<User> users;
    vector<Order> orders;

    string loggedInUser;
    bool isLoggedIn = false;
    int durationSeconds = 5;
    
    while (true) {
        if (!isLoggedIn) {
            cout << "===== Selamat Datang di Hammer Bakery =====" << endl;
            cout << "Silakan pilih opsi:" << endl;
            cout << "1. Registrasi" << endl;
            cout << "2. Login" << endl;
            cout << "Pilih opsi: ";
            int choice;
            cin >> choice;

            switch (choice) {
                case 1:
                    clearScreen();
                    registerUser(users);
                    clearScreen();
                    animasiloading(durationSeconds);
                    clearScreen();
                    while (!isLoggedIn) {
                isLoggedIn = loginUser(users, loggedInUser);
                if (isLoggedIn) {
                    cout << "Login berhasil!" << endl;
                    sleep(1);
                    clearScreen();
                } else {
                    cout << "Password atau username salah. Silakan coba lagi!" << endl;
                }
                }
                    break;
                case 2:
                clearScreen();
                     while (!isLoggedIn) {
                isLoggedIn = loginUser(users, loggedInUser);
                if (isLoggedIn) {
                    cout << "Login berhasil!" << endl;
                    sleep(1);
                    clearScreen();
                } else {
                    cout << "Password atau username salah. Silakan coba lagi!" << endl;
                }
                }
                    break;
                case 3:
                    cout << "Terima kasih telah mengunjungi Hammer Bakery." << endl;
                    return 0;
                default:
                    cout << "Opsi tidak valid. Silakan coba lagi." << endl;
            }
        } else {
            displayMainMenu();
            int choice;
            cin >> choice;

            switch (choice) {
                case 1:
                    displayCakeMenu(cakeCatalog);
                    break;
                case 2:
                    orderCake(cakeCatalog, orders, loggedInUser);
                    break;
                case 3:
                    cout << "Terima kasih telah menggunakan layanan Hammer Bakery." << endl;
                    return 0;
                default:
                    cout << "Opsi tidak valid. Silakan coba lagi." << endl;
            }
        }
    }

    return 0;
}
